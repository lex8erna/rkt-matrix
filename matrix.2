#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 128 255 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 128 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 255 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 128 255 128 128 128 128 -1
-1 2 27 #"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 128 255 128 128 128 128 -1
-1 4 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 3681 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; **********************************************"
0 0 24 29 1 #"\n"
0 0 18 3 21 #";; Matrix Calculation"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; Version 1.0"
0 0 24 29 1 #"\n"
0 0 18 3 17 #";; By Alex Truong"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; **********************************************"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 15 #"; Introduction:"
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #"; Created and distributed for study purposes for a course in linear "
 #"algebra."
) 0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";      Operations were based off of the interactions of elementary m"
 #"atrices."
) 0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #"; Thus, the functions in this module are likely not the most efficie"
 #"nt, but"
) 0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #"; will function very quickly for most typical matrixes students woul"
 #"d likely"
) 0 0 24 29 1 #"\n"
0 0 18 3 51 #"; type out by hand for the purpose of verification."
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 24 29 1 #"\n"
0 0 18 3 73
(
 #";      Matrices as defined in this module consist of a mutable struc"
 #"ture "
) 0 0 24 29 1 #"\n"
0 0 18 3 15 #"; containing an"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-Matrix"
0 0 18 3 2 #" ("
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 6 #"matrix"
0 0 18 3 1 #" "
0 0 18 3 7 #"written"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 4 #"form"
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 3 #"row"
0 0 18 3 1 #" "
0 0 18 3 6 #"vector"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 1 #")"
0 0 18 3 1 #","
0 0 24 29 1 #"\n"
0 0 18 3 5 #"; and"
0 0 18 3 18 #" a pseudo-identity"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-Matrix"
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 1 #" "
0 0 18 3 5 #"equal"
0 0 18 3 1 #" "
0 0 18 3 11 #"dimensions."
0 0 18 3 1 #" "
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 24 29 1 #"\n"
0 0 18 3 10 #";     This"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-Matrix"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 1 #" "
0 0 18 3 5 #"used "
0 0 18 3 3 #"for"
0 0 18 3 1 #" "
0 0 18 3 7 #"finding"
0 0 18 3 1 #" "
0 0 18 3 8 #"inverses"
0 0 18 3 1 #","
0 0 18 3 1 #" "
0 0 18 3 2 #"as"
0 0 18 3 1 #" "
0 0 18 3 3 #"any"
0 0 18 3 1 #" "
0 0 18 3 3 #"row"
0 0 18 3 1 #" "
0 0 18 3 10 #"operations"
0 0 24 29 1 #"\n"
0 0 18 3 11 #"; performed"
0 0 18 3 1 #" "
0 0 18 3 2 #"on"
0 0 18 3 1 #" "
0 0 18 3 3 #"one"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-Matrix"
0 0 18 3 1 #" "
0 0 18 3 7 #"is also"
0 0 18 3 1 #" "
0 0 18 3 9 #"performed"
0 0 18 3 1 #" "
0 0 18 3 2 #"on"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 6 #"other."
0 0 18 3 1 #" "
0 0 18 3 5 #"Hence"
0 0 18 3 1 #","
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 24 29 1 #"\n"
0 0 18 3 17 #"; pseudo-identity"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-matrix"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 47 #" merely piggy-back riding. Inverses are invalid"
0 0 24 29 1 #"\n"
0 0 18 3 5 #"; for"
0 0 18 3 1 #" "
0 0 18 3 3 #"any"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-Matrix"
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 1 #" "
0 0 18 3 9 #"dimension"
0 0 18 3 1 #" "
0 0 18 3 20 #"n by m where n != m."
0 0 24 29 1 #"\n"
0 0 18 3 1 #";"
0 0 24 29 1 #"\n"
0 0 18 3 74
(
 #";     A number of functions have been defined as shortcuts for inter"
 #"action"
) 0 0 24 29 1 #"\n"
0 0 18 3 74
(
 #"; purposes. Non-mutative functions are generally intended for L-Matr"
 #"ices, "
) 0 0 24 29 1 #"\n"
0 0 18 3 7 #"; while"
0 0 18 3 62
#" the mutative functions are intended for Matrices, with a few "
0 0 24 29 1 #"\n"
0 0 18 3 13 #"; exceptions."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-matrix"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"NM"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-identity"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"NI"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 9 #"transpose"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 10 #"transpose!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 15 #"vector-multiply"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 12 #"row-multiply"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 13 #"row-multiply!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 15 #"matrix-multiply"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 16 #"matrix-multiply!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 7 #"EM-swap"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 7 #"EM-mult"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 7 #"EM-plus"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 9 #"ERO-swap!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 9 #"ERO-mult!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 9 #"ERO-plus!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 15 #"Quiet-ERO-swap!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 15 #"Quiet-ERO-mult!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 15 #"Quiet-ERO-plus!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 3 #"swp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 3 #"mlt"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 3 #"pls"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"qswp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"qmlt"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"qpls"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 11 #"row-reduce!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 5 #"RREF!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"REF?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 5 #"RREF?"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 4 #"rank"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 7 #"inverse"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 14 #"display-matrix"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 15 #"display-reverse"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"DM"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 2 #"DR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 32 #";; An L-Vector is a (listof Num)"
0 0 24 29 1 #"\n"
0 0 18 3 35 #";; An L-Matrix is a (listof Vector)"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";; A Matrix is a (matrix L-Matrix L-Matrix)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entries"
0 0 24 3 1 #" "
0 0 14 3 7 #"reverse"
0 0 24 3 12 #") #:mutable)"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; Shorthand for Interactions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 6 #"matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 34 #";; l-matrix? : L-Matrix -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; leading-co-eff : L-Vector -> (Union false Num)"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 58
#";; POST:  Returns the first non-zero entry in an L-Vector."
0 0 24 29 1 #"\n"
0 0 18 3 33 #";;        If none, returns false."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"leading-co-eff"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #"))) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 14 #"leading-co-eff"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 48 #";; leading-index : L-Vector -> (Union false Nat)"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 71
(
 #";; POST:  Returns the index of the first non-zero entry in an L-Vect"
 #"or."
) 0 0 24 29 1 #"\n"
0 0 18 3 33 #";;        If none, returns false."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"leading-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"i"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"search"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"search"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";; build-identity : Nat Nat Nat -> L-Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 46 #";; POST:  Produces an L-Matrix of size n by m."
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; Notes: i is used as incrementation."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"build-identity"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 22 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 14 #"build-identity"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 31 #";; new-identity : Nat -> Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 62
#";; POST:  Produces a new identity Matrix of dimensions n by n."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"new-identity"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"ident-matrix"
0 0 24 3 2 #" ("
0 0 14 3 14 #"build-identity"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 12 #"ident-matrix"
0 0 24 3 1 #" "
0 0 14 3 12 #"ident-matrix"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; Shorthand for Interactions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"NI"
0 0 24 3 1 #" "
0 0 14 3 12 #"new-identity"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 34 #";; new-matrix : L-Matrix -> Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 32 #";; POST:  Produces a new Matrix."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 14 #"build-identity"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; Shorthand for Interactions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"NM"
0 0 24 3 1 #" "
0 0 14 3 10 #"new-matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; vector-multiply : L-Vector L-Vector"
0 0 18 3 7 #" -> Num"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 48 #";; POST:  Returns the vector product of a and b."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 22 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 15 #"vector-multiply"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 47 #";; row-multiply : L-Vector L-Matrix -> L-Vector"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 55 #";; POST:  Returns the vector-matrix product of a and B."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"row-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 15 #"vector-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 12 #"row-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 42 #";; row-multiply! : L-Vector Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 60
#";; POST:  Sets A to be the vector-matrix product of a and B."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"row-multiply!"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"row-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-reverse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"row-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 35 #";; transpose : L-Matrix -> L-Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 44 #";; POST:  Returns the transpose matrix of A."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; transpose : Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 49 #";; POST:  Sets A to be the transpose matrix of A."
0 0 24 29 1 #"\n"
0 0 18 3 53 #";;        Also transposes the reverse component of A."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"transpose!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"set-matrix-reverse"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 50 #";; matrix-multiply : L-Matrix L-Matrix -> L-Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 55 #";; POST:  Returns the matrix-matrix product of A and B."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"row-multiply"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"multiply"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 1 #"B"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"multiply"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";; matrix-multiply! : Matrix Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 60
#";; POST:  Sets A to be the matrix-matrix product of A and B."
0 0 24 29 1 #"\n"
0 0 18 3 30 #";; Notes: B remains unchanged."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"matrix-multiply!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"B"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 41 #";; EM-swap : L-Matrix Nat Nat -> L-Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; PRE:   row1, row2 are within range."
0 0 24 29 1 #"\n"
0 0 18 3 79
(
 #";; POST:  Returns an Elementary L-Matrix of row exchange of the same"
 #" dimensions"
) 0 0 24 29 1 #"\n"
0 0 18 3 43 #";;        as L-Matrix A, for row1 and row2."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-swap"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 22 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 5 #"]))) "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 41 #";; EM-mult : L-Matrix Nat Num -> L-Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 30 #";; PRE:   row is within range."
0 0 24 29 1 #"\n"
0 0 18 3 29 #";;        scalar is non-zero."
0 0 24 29 1 #"\n"
0 0 18 3 72
(
 #";; POST:  Returns an Elementary L-Matrix of scalar multiplication of"
 #" the"
) 0 0 24 29 1 #"\n"
0 0 18 3 14 #";;        same"
0 0 18 3 42 #" dimensions as L-Matrix A, for scalar*row."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-mult"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 3 #"one"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 14 3 3 #"one"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 22 3 1 #"1"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 45 #";; EM-plus : L-Matrix Nat Nat Num -> L-Matrix"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; PRE:   row1, row2 are within range."
0 0 24 29 1 #"\n"
0 0 18 3 29 #";;        scalar is non-zero."
0 0 24 29 1 #"\n"
0 0 18 3 79
(
 #";; POST:  Returns an Elementary L-Matrix of row addition of the same"
 #" dimensions"
) 0 0 24 29 1 #"\n"
0 0 18 3 12 #";         as"
0 0 18 3 1 #" "
0 0 18 3 8 #"L-Matrix"
0 0 18 3 1 #" "
0 0 18 3 1 #"A"
0 0 18 3 1 #","
0 0 18 3 1 #" "
0 0 18 3 3 #"for"
0 0 18 3 18 #" row1+scalar*row2."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-plus"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 22 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 13 #"entry-ones-fn"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 22 3 1 #"0"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-create"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"matrix-create"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 37 #";; ERO-swap! : Matrix Nat Nat -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; PRE:   row1, row2 are within range."
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";; POST:  Performs the Elementary Row Operation of row exchange on M"
 #"atrix A,"
) 0 0 24 29 1 #"\n"
0 0 18 3 69
(
 #";;        for row1 <-> row2. The operation and results are displayed"
 #"."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ERO-swap!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-swap"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 18 #"set-matrix-reverse"
0 0 14 3 1 #"!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 32 #"\"Operation: Swapping R~a <-> R~a"
0 0 20 3 3 #"\\n\""
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"display-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";; Quiet-ERO-swap! : Matrix Nat Nat -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; PRE:   row1, row2 are within range."
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";; POST:  Performs the Elementary Row Operation of row exchange on M"
 #"atrix A,"
) 0 0 24 29 1 #"\n"
0 0 18 3 28 #";;        for row1 <-> row2."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Quiet-ERO-swap!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-swap"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-reverse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 37 #";; ERO-mult! : Matrix Nat Num -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 30 #";; PRE:   row is within range."
0 0 24 29 1 #"\n"
0 0 18 3 29 #";;        scalar is non-zero."
0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";; POST:  Performs the Elementary Row Operation of scalar multiplica"
 #"tion on"
) 0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";;        Matrix A, for scalar*row. The operation and results are di"
 #"splayed."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ERO-mult!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-mult"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-reverse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 36 #"\"Operation: Multiplying R~a by ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"display-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";; Quiet-ERO-mult! : Matrix Nat Num -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 30 #";; PRE:   row is within range."
0 0 24 29 1 #"\n"
0 0 18 3 29 #";;        scalar is non-zero."
0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";; POST:  Performs the Elementary Row Operation of scalar multiplica"
 #"tion on"
) 0 0 24 29 1 #"\n"
0 0 18 3 35 #";;        Matrix A, for scalar*row."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Quiet-ERO-mult!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-mult"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 3 #"row"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-reverse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 41 #";; ERO-plus! : Matrix Nat Nat Num -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; PRE:   row1, row2 are within range."
0 0 24 29 1 #"\n"
0 0 18 3 29 #";;        scalar is non-zero."
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";; POST:  Performs the Elementary Row Operation of row addition on M"
 #"atrix A,"
) 0 0 24 29 1 #"\n"
0 0 18 3 72
(
 #";;        for row1+scalar*row2. The operation and results are displa"
 #"yed."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"ERO-plus!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-plus"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-reverse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 35 #"\"Operation: Adding ~axR~a to R~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"display-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 47 #";; Quiet-ERO-plus! : Matrix Nat Nat Num -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; PRE:   row1, row2 are within range."
0 0 24 29 1 #"\n"
0 0 18 3 29 #";;        scalar is non-zero."
0 0 24 29 1 #"\n"
0 0 18 3 76
(
 #";; POST:  Performs the Elementary Row Operation of row addition on M"
 #"atrix A,"
) 0 0 24 29 1 #"\n"
0 0 18 3 72
(
 #";;        for row1+scalar*row2. The operation and results are displa"
 #"yed."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"Quiet-ERO-plus!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 7 #"EM-plus"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"row1"
0 0 24 3 1 #" "
0 0 14 3 4 #"row2"
0 0 24 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-entries!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"set-matrix-reverse!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 15 #"matrix-multiply"
0 0 24 3 1 #" "
0 0 14 3 2 #"EM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; Shorthand for Interactions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"swp"
0 0 24 3 1 #" "
0 0 14 3 9 #"ERO-swap!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"mlt"
0 0 24 3 1 #" "
0 0 14 3 9 #"ERO-mult!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"pls"
0 0 24 3 1 #" "
0 0 14 3 9 #"ERO-plus!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"qswp"
0 0 24 3 1 #" "
0 0 14 3 15 #"Quiet-ERO-swap!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"qmlt"
0 0 24 3 1 #" "
0 0 14 3 15 #"Quiet-ERO-mult!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"qpls"
0 0 24 3 1 #" "
0 0 14 3 15 #"Quiet-ERO-plus!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 38 #";; display-L-matrix : L-Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 56 #";; POST:  Prints the L-Vectors of L-Matrix A row by row."
0 0 24 29 1 #"\n"
0 0 18 3 70
(
 #";; Notes: Normally displaying a list by itself results in a horizont"
 #"al"
) 0 0 24 29 1 #"\n"
0 0 18 3 51 #";;        display, which is more difficult to read."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"display-L-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 20 3 2 #"\"\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 5 #"\"~a\\n"
0 0 20 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 16 #"display-L-matrix"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 34 #";; display-matrix : Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 54 #";; POST:  Prints the L-Vectors of Matrix A row by row."
0 0 24 29 1 #"\n"
0 0 18 3 70
(
 #";; Notes: Normally displaying a list by itself results in a horizont"
 #"al"
) 0 0 24 29 1 #"\n"
0 0 18 3 51 #";;        display, which is more difficult to read."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"display-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"display-L-matrix"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 35 #";; display-reverse : Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 62
#";; POST:  Prints the L-Vectors of Matrix A reverse row by row."
0 0 24 29 1 #"\n"
0 0 18 3 70
(
 #";; Notes: Normally displaying a list by itself results in a horizont"
 #"al"
) 0 0 24 29 1 #"\n"
0 0 18 3 51 #";;        display, which is more difficult to read."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"display-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"display-L-matrix"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; Shorthand for Interactions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"DM"
0 0 24 3 1 #" "
0 0 14 3 14 #"display-matrix"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"DR"
0 0 24 3 1 #" "
0 0 14 3 15 #"display-reverse"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 31 #";; row-reduce! : Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 41 #";; POST:  Row-reduces Matrix A. (Verbose)"
0 0 24 29 1 #"\n"
0 0 18 3 68
#";; Notes: For the algorithm below, n is used to record the number of"
0 0 24 29 1 #"\n"
0 0 18 3 15 #";;        rows."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"row-reduce!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 53 #";; row-search : Nat Nat L-Matrix -> (Union false Nat)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 72
(
 #";; POST:  Returns the index of the first suitable row for which the "
 #"n-th"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 15 #";;        entry"
0 0 18 3 1 #" "
0 0 18 3 2 #"is"
0 0 18 3 49 #" non-zero, or false if such a row does not exist."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 67
#";;        Performs scalar multiplication on that row, if it exists."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"nth-entry"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 9 #"nth-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"mlt"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 9 #"nth-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"i"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 42 #";; row-zero : Nat Nat Nat L-Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 71
(
 #";; POST:  Performs row reduction by row addition using the row found"
 #" by"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 51 #";;        row-search, for each row in the L-Matrix."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 6 #"origin"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 6 #"origin"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 6 #"origin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"elim-co-eff"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"pls"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 6 #"origin"
0 0 24 3 2 #") "
0 0 14 3 11 #"elim-co-eff"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 6 #"origin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 29 #";; row-swap : Nat Nat -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 45 #";; POST:  Performs row exchange if necessary."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"row-swap"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 3 #"swp"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 23 #";; reduce : Nat -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 41 #";; POST:  Enacts the following algorithm:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 70
(
 #";;        Let n be the number of completed columns via row reduction"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 17 #";;        Search "
0 0 18 3 4 #"n-th"
0 0 18 3 6 #" entry"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 4 #"each"
0 0 18 3 1 #" "
0 0 18 3 6 #"column"
0 0 18 3 1 #" "
0 0 18 3 3 #"for"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 8 #"suitable"
0 0 18 3 1 #" "
0 0 18 3 7 #"row for"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 39 #";;        row addition, via row-search."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 74
(
 #";;        Performs row reduction if such a row exists for n, via row"
 #"-zero."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 58
#";;        Performs row exchange if required, via row-swap."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 61
#";;        Increment n, and repeat until n = rows of Matrix A."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 26 #"\"Row Reduction Complete\\n\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 22 #"\"Reducing Column ~a\\n\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 22 #"\"Search result: R~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 24 3 2 #" ["
0 0 14 3 13 #"search-result"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"row-swap"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 3 #"\"No"
0 0 20 3 37 #" suitable rows found for Column ~a\\n\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 3 #"End"
0 0 20 3 1 #" "
0 0 20 3 25 #"of Column ~a Reduction\\n\""
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"reduce"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 20 3 1 #"\""
0 0 20 3 7 #"Reduced"
0 0 20 3 1 #" "
0 0 20 3 3 #"Row"
0 0 20 3 1 #" "
0 0 20 3 16 #"Echelon Form:\\n\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"display-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 37 #";; quiet-row-reduce! : Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 39 #";; POST:  Row-reduces Matrix A. (Quiet)"
0 0 24 29 1 #"\n"
0 0 18 3 68
#";; Notes: For the algorithm below, n is used to record the number of"
0 0 24 29 1 #"\n"
0 0 18 3 15 #";;        rows."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"quiet-row-reduce!"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 53 #";; row-search : Nat Nat L-Matrix -> (Union false Nat)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 72
(
 #";; POST:  Returns the index of the first suitable row for which the "
 #"n-th"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 15 #";;        entry"
0 0 18 3 1 #" "
0 0 18 3 51 #"is non-zero, or false if such a row does not exist."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 67
#";;        Performs scalar multiplication on that row, if it exists."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"nth-entry"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 9 #"nth-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"qmlt"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 9 #"nth-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 1 #"i"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 42 #";; row-zero : Nat Nat Nat L-Matrix -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 71
(
 #";; POST:  Performs row reduction by row addition using the row found"
 #" by"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 51 #";;        row-search, for each row in the L-Matrix."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 6 #"origin"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 6 #"origin"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 6 #"origin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"elim-co-eff"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"qpls"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 6 #"origin"
0 0 24 3 2 #") "
0 0 14 3 11 #"elim-co-eff"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 6 #"origin"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 29 #";; row-swap : Nat Nat -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 45 #";; POST:  Performs row exchange if necessary."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"row-swap"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"qswp"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 23 #";; reduce : Nat -> Void"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 41 #";; POST:  Enacts the following algorithm:"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 70
(
 #";;        Let n be the number of completed columns via row reduction"
 #"s."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 17 #";;        Search "
0 0 18 3 4 #"n-th"
0 0 18 3 6 #" entry"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 4 #"each"
0 0 18 3 1 #" "
0 0 18 3 6 #"column"
0 0 18 3 1 #" "
0 0 18 3 3 #"for"
0 0 18 3 1 #" "
0 0 18 3 1 #"a"
0 0 18 3 1 #" "
0 0 18 3 8 #"suitable"
0 0 18 3 8 #" row for"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 39 #";;        row addition, via row-search."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 74
(
 #";;        Performs row reduction if such a row exists for n, via row"
 #"-zero."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 58
#";;        Performs row exchange if required, via row-swap."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 18 3 61
#";;        Increment n, and repeat until n = rows of Matrix A."
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 4 #"rows"
0 0 24 3 2 #") "
0 0 14 3 4 #"void"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 2 #" ("
0 0 14 3 10 #"row-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 24 3 2 #" ["
0 0 14 3 13 #"search-result"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"row-zero"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"row-swap"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 13 #"search-result"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"reduce"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"reduce"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 18 3 29 #";; Shorthand for Interactions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"RREF!"
0 0 24 3 1 #" "
0 0 14 3 11 #"row-reduce!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"QRREF!"
0 0 24 3 1 #" "
0 0 14 3 17 #"quiet-row-reduce!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 27 #";; REF? : Matrix -> Boolean"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 62
#";; POST:  Returns true if the Matrix A is in Row Echelon Form."
0 0 24 29 1 #"\n"
0 0 18 3 39 #";; Notes: A is in Row Echelon Form if: "
0 0 24 29 1 #"\n"
0 0 18 3 57 #";;          1. All non-zero rows are above all zero rows."
0 0 24 29 1 #"\n"
0 0 18 3 78
(
 #";;          2. Leading co-efficients are strictly to the right of an"
 #"y leading "
) 0 0 24 29 1 #"\n"
0 0 18 3 28 #";;             co-efficients"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 4 #"rows"
0 0 18 3 1 #" "
0 0 18 3 9 #"above it."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"REF?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 1 #" "
0 0 14 3 15 #"last-lead-index"
0 0 24 3 1 #" "
0 0 14 3 8 #"zero-row"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"lead-index"
0 0 24 3 2 #" ("
0 0 14 3 13 #"leading-index"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 10 #"lead-index"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 8 #"zero-row"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 10 #"lead-index"
0 0 24 3 1 #" "
0 0 14 3 15 #"last-lead-index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 5 #"false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 [("
0 0 14 3 6 #"false?"
0 0 24 3 1 #" "
0 0 14 3 10 #"lead-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 1 #" "
0 0 22 3 6 #"+inf.0"
0 0 24 3 1 #" "
0 0 14 3 4 #"true"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 1 #" "
0 0 14 3 10 #"lead-index"
0 0 24 3 1 #" "
0 0 14 3 8 #"zero-row"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 7 #"))])]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 1 #" "
0 0 22 3 6 #"-inf.0"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 28 #";; RREF? : Matrix -> Boolean"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 70
(
 #";; POST:  Returns true if the Matrix A is in Reduced Row Echelon For"
 #"m."
) 0 0 24 29 1 #"\n"
0 0 18 3 46 #";; Notes: A is in Reduced Row Echelon Form if:"
0 0 24 29 1 #"\n"
0 0 18 3 39 #";;          1. A is in Row Echelon Form"
0 0 24 29 1 #"\n"
0 0 18 3 46 #";;          2. All leading co-efficients are 1"
0 0 24 29 1 #"\n"
0 0 18 3 75
(
 #";;          3. All leading 1's are the only non-zero entries in the "
 #"column."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"RREF?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"entries-T"
0 0 24 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"loneliness?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 11 #"loneliness?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"valid-row?"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-T"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 14 #"leading-co-eff"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"loneliness?"
0 0 24 3 1 #" "
0 0 14 3 3 #"v-T"
0 0 24 3 2 #" ("
0 0 14 3 13 #"leading-index"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 22 3 1 #"0"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 3 #"A-T"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #") "
0 0 14 3 4 #"true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 10 #"valid-row?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"A-T"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"A-T"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 4 #"REF?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 16 #"criterion-search"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #" "
0 0 14 3 9 #"entries-T"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 23 #";; rank : Matrix -> Nat"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 39 #";; POST:  Returns the rank of Matrix A."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rank"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"RREF"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"RREF?"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #") ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-matrix"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"QRREF!"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"R"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 4 #"RREF"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 18 3 43 #";; inverse : Matrix -> (Union false Matrix)"
0 0 24 29 1 #"\n"
0 0 18 3 14 #";; PRE:   true"
0 0 24 29 1 #"\n"
0 0 18 3 63
#";; POST:  Returns the inverse Matrix of Matrix A, if it exists."
0 0 24 29 1 #"\n"
0 0 18 3 34 #";;        Returns false otherwise."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"inverse"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 16 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 16 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"copy"
0 0 24 3 2 #" ("
0 0 14 3 10 #"new-matrix"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"QRREF!"
0 0 24 3 1 #" "
0 0 14 3 4 #"copy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 4 #"copy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 14 #"build-identity"
0 0 24 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                      ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"entries"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 1 #"M"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix-reverse"
0 0 24 3 1 #" "
0 0 14 3 4 #"copy"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"matrix-entries"
0 0 24 3 1 #" "
0 0 14 3 4 #"copy"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
